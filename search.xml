<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[常用排序算法及优化]]></title>
    <url>%2F2018%2F09%2F07%2F%E5%B8%B8%E7%94%A8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%BB%A5%E5%8F%8A%E4%BC%98%E5%8C%96%2F</url>
    <content type="text"></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>排序</tag>
        <tag>算法</tag>
        <tag>冒泡排序</tag>
        <tag>归并排序</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[类视图]]></title>
    <url>%2F2018%2F09%2F06%2Fdjango%E7%B1%BB%E8%A7%86%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[类视图笔记 ListView举例 12345678910111213141516171819202122232425262728293031from blog.models import Articlefrom blog.models import Categoryfrom django.views.generic import ListViewimport markdown2class IndexView(ListView): """ 首页视图,继承自ListVIew，用于展示从数据库中获取的文章列表 """ template_name = "blog/index.html" # template_name属性用于指定使用哪个模板进行渲染 context_object_name = "article_list" # context_object_name属性用于给上下文变量取名（在模板中使用该名字） def get_queryset(self): """ 过滤数据，获取所有已发布文章，并且将内容转成markdown形式 """ article_list = Article.objects.filter(status='p') # 获取数据库中的所有已发布的文章，即filter(过滤)状态为'p'(已发布)的文章。 for article in article_list: article.body = markdown2.markdown(article.body, ) # 将markdown标记的文本转为html文本 return article_list def get_context_data(self, **kwargs): # 增加额外的数据，这里返回一个文章分类，以字典的形式 kwargs['category_list'] = Category.objects.all().order_by('name') return super(IndexView, self).get_context_data(**kwargs) 使用分页 – 需要多继承几个类属性 123456789101112131415161718192021from django.shortcuts import renderfrom django.http.response import HttpResponsefrom django.views.generic import View, ListView#modelfrom models import *#pythonimport urllib2"""ListView只需要传好变量即可使用：context_object_name是数据库搜索出来的结果存放的变量名字，用于模板循环显示template_name加载该html文件paginate_by设置分页中每一页的记录数目model定义从哪份model中查询"""class ServerListIndex(ListView): context_object_name = 'serverlist' template_name = 'serverlist.jinja.html' paginate_by = 50 model = ServerList 分页调用方法 1234567891011page_obj是分页对像实例，这个名字是ListView默认生成的page_obj的变量：page_obj.paginator.page_range：所有分页的number，是一个listpage_obj.number：当前分页的页码page_obj.paginator.num_pages：总分页数，就是一共有多少页page_obj的方法：page_obj.has_previous()：判断是否有上一页page_obj.previous_page_number()：返回上一页的numberpage_obj.has_next()：判断是否有下一页page_obj.next_page_number()：返回下一页的number 如果需要对出来的列表做限制，比如显示查询结果 123就需要重写重写了get_queryset方法，达到利用get参数自定义SQL的作用重新get_context_data方法，相当于return render_to_response(xxx.html,&#123;&#125;,context_instance=RequestContext(request))中的&#123;&#125;的内容，就是传给模板的变量]]></content>
      <categories>
        <category>Django</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Django笔记]]></title>
    <url>%2F2018%2F09%2F05%2Fdjango%20%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[###django 笔记 ####在request请求中获取客户端的相关信息 可在request对象的Meta属性中获取以下键值对 1234567891011121314CONTENT_LENGTHCONTENT;_TYPEHTTP_ACCEPT_ENCODINGHTTP_ACCEPT_LANGUAGEHTTP_REFERER -- The referring page, if; any.HTTP_USER_AGENT -- The client&apos;s user-agent string.QUERY_STRING -- The query string, as a single (unparsed) string.REMOTE_ADDR -- The IP; address of the client.REMOTE_HOST -- The hostname of the client.REQUEST_METHOD -- A string such as &quot;GET&quot; or &quot;POST&quot;.SERVER_NAME -- The hostname of the server.SERVER_PORT -- The port of the server.获取方式agent = request.META.get(&apos;HTTP_USER_AGENT&apos;,none) ####模板中输出当前时间或格式化时间 12345模板中格式化显示时间（time是后端传来的时间字符串）&#123;&#123; time|date:&quot;Y-m-d H:i:s&quot; &#125;&#125;模板中直接调用显示当前时间&#123;% now &quot;Y-m-d H:i:s&quot; %&#125;* Y-m-d H:i:s -- 依次代表年月日时分秒 orm模型中基本查询操作1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768# 获取总数，对应SQL：select count(1) from UserUser.objects.count() # 获取总数，对应SQL：select count(1) from User where name = '运维咖啡吧'User.objects.filter(name='运维咖啡吧').count() # 大于，&gt;，对应SQL：select * from User where id &gt; 724User.objects.filter(id__gt=724) # 大于等于，&gt;=，对应SQL：select * from User where id &gt;= 724User.objects.filter(id__gte=724) # 小于，&lt;，对应SQL：select * from User where id &lt; 724User.objects.filter(id__lt=724) # 小于等于，&lt;=，对应SQL：select * from User where id &lt;= 724User.objects.filter(id__lte=724) # 同时大于和小于， 1 &lt; id &lt; 10，对应SQL：select * from User where id &gt; 1 and id &lt; 10User.objects.filter(id__gt=1, id__lt=10) # 包含，in，对应SQL：select * from User where id in (11,22,33)User.objects.filter(id__in=[11, 22, 33]) # 不包含，not in，对应SQL：select * from User where id not in (11,22,33)User.objects.exclude(id__in=[11, 22, 33]) # 为空：isnull=True，对应SQL：select * from User where pub_date is nullUser.objects.filter(pub_date__isnull=True) # 不为空：isnull=False，对应SQL：select * from User where pub_date is not nullUser.objects.filter(pub_date__isnull=True) # 匹配，like，大小写敏感，对应SQL：select * from User where name like '%sre%'，SQL中大小写不敏感User.objects.filter(name__contains="sre") # 匹配，like，大小写不敏感，对应SQL：select * from User where name like '%sre%'，SQL中大小写不敏感User.objects.filter(name__icontains="sre") # 不匹配，大小写敏感，对应SQL：select * from User where name not like '%sre%'，SQL中大小写不敏感User.objects.exclude(name__contains="sre") # 不匹配，大小写不敏感，对应SQL：select * from User where name not like '%sre%'，SQL中大小写不敏感User.objects.exclude(name__icontains="sre") # 范围，between and，对应SQL：select * from User where id between 3 and 8User.objects.filter(id__range=[3, 8]) # 以什么开头，大小写敏感，对应SQL：select * from User where name like 'sh%'，SQL中大小写不敏感User.objects.filter(name__startswith='sre') # 以什么开头，大小写不敏感，对应SQL：select * from User where name like 'sh%'，SQL中大小写不敏感User.objects.filter(name__istartswith='sre') # 以什么结尾，大小写敏感，对应SQL：select * from User where name like '%sre'，SQL中大小写不敏感User.objects.filter(name__endswith='sre') # 以什么结尾，大小写不敏感，对应SQL：select * from User where name like '%sre'，SQL中大小写不敏感User.objects.filter(name__iendswith='sre') # 排序，order by，正序，对应SQL：select * from User where name = '运维咖啡吧' order by idUser.objects.filter(name='运维咖啡吧').order_by('id') # 多级排序，order by，先按name进行正序排列，如果name一致则再按照id倒叙排列User.objects.filter(name='运维咖啡吧').order_by('name','-id') # 排序，order by，倒序，对应SQL：select * from User where name = '运维咖啡吧' order by id descUser.objects.filter(name='运维咖啡吧').order_by('-id') 进阶操作12345678910111213141516171819202122232425262728# limit，对应SQL：select * from User limit 3;User.objects.all()[:3] # limit，取第三条以后的数据，没有对应的SQL，类似的如：select * from User limit 3,10000000，从第3条开始取数据，取10000000条（10000000大于表中数据条数）User.objects.all()[3:] # offset，取出结果的第10-20条数据（不包含10，包含20）,也没有对应SQL，参考上边的SQL写法User.objects.all()[10:20] # 分组，group by，对应SQL：select username,count(1) from User group by username;from django.db.models import CountUser.objects.values_list('username').annotate(Count('id')) # 去重distinct，对应SQL：select distinct(username) from UserUser.objects.values('username').distinct().count() # filter多列、查询多列，对应SQL：select username,fullname from accounts_userUser.objects.values_list('username', 'fullname') # filter单列、查询单列，正常values_list给出的结果是个列表，里边里边的每条数据对应一个元组，当只查询一列时，可以使用flat标签去掉元组，将每条数据的结果以字符串的形式存储在列表中，从而避免解析元组的麻烦User.objects.values_list('username', flat=True) # int字段取最大值、最小值、综合、平均数from django.db.models import Sum,Count,Max,Min,Avg User.objects.aggregate(Count(‘id’))User.objects.aggregate(Sum(‘age’)) Q查询12345678910111213141516171819from django.db.models import Q User.objects.filter( Q(role__startswith='sre_'), Q(name='公众号') | Q(name='运维咖啡吧'))# 等同sql select * from User where role like 'sre_%' and (name='公众号' or name='运维咖啡吧')"""通常更多的时候我们用Q来做搜索逻辑，比如前台搜索框输入一个字符，后台去数据库中检索标题或内容中是否包含"""_s = request.GET.get('search') _t = Blog.objects.all()if _s: _t = _t.filter( Q(title__icontains=_s) | Q(content__icontains=_s) )return _t 外键 表结构 123456class Role(models.Model): name = models.CharField(max_length=16, unique=True) class User(models.Model): username = models.EmailField(max_length=255, unique=True) role = models.ForeignKey(Role, on_delete=models.CASCADE) 正向查询 123# 查询用户的角色名_t = User.objects.get(username='运维咖啡吧')_t.role.name 反向查询 123456789101112131415# 查询角色下包含的所有用户# 第一种_t = Role.objects.get(name='Role03')_t.user_set.all()# 第二种_t = Role.objects.get(name='Role03')# 这种方法比上一种_set的方法查询速度要快User.objects.filter(role=_t)# 第三种 有前置要求 定义外键列的related_name属性class User(models.Model): username = models.EmailField(max_length=255, unique=True) role = models.ForeignKey(Role, on_delete=models.CASCADE,related_name='roleUsers')_t = Role.objects.get(name = 'Role03')_t.roleUsers.all() 执行原生SQL12345678910"""Django中能用ORM的就用它ORM吧，不建议执行原生SQL，可能会有一些安全问题，如果实在是SQL太复杂ORM实现不了，那就看看下边执行原生SQL的方法，跟直接使用pymysql基本一致了"""from django.db import connection with connection.cursor() as cursor: cursor.execute('select * from accounts_User') row = cursor.fetchall() return row django自带的auth的session的失效时间设置1234# session 设置SESSION_COOKIE_AGE = 60 * 30 # 30分钟SESSION_SAVE_EVERY_REQUEST = TrueSESSION_EXPIRE_AT_BROWSER_CLOSE = True # 关闭浏览器，则COOKIE失效 django2.0以后设置外键必须要设置on_delete属性从上面外键(ForeignKey)和一对一(OneToOneField)的参数中可以看出,都有on_delete参数,而 django 升级到2.0之后,表与表之间关联的时候,必须要写on_delete参数,否则会报异常: 1234567891011on_delete=None, # 删除关联表中的数据时,当前表与其关联的field的行为on_delete=models.CASCADE, # 删除关联数据,与之关联也删除on_delete=models.DO_NOTHING, # 删除关联数据,什么也不做on_delete=models.PROTECT, # 删除关联数据,引发错误ProtectedError# models.ForeignKey(&apos;关联表&apos;, on_delete=models.SET_NULL, blank=True, null=True)on_delete=models.SET_NULL, # 删除关联数据,与之关联的值设置为null（前提FK字段需要设置为可空,一对一同理）# models.ForeignKey(&apos;关联表&apos;, on_delete=models.SET_DEFAULT, default=&apos;默认值&apos;)on_delete=models.SET_DEFAULT, # 删除关联数据,与之关联的值设置为默认值（前提FK字段需要设置默认值,一对一同理）on_delete=models.SET, # 删除关联数据, a. 与之关联的值设置为指定值,设置：models.SET(值) b. 与之关联的值设置为可执行对象的返回值,设置：models.SET(可执行对象)]]></content>
      <categories>
        <category>Django</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[前端基础]]></title>
    <url>%2F2018%2F09%2F04%2F%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86%2F</url>
    <content type="text"><![CDATA[Web前端概述1.html – 控制内容2.css – 控制样式3.JS – 控制行为 HTML简史 1991年10月：一个非正式CERN（欧洲核子研究中心）文件首次公开18个HTML标签，这个文件的作者是物理学家蒂姆·伯纳斯-李，因此他是万维网的发明者，也是万维网联盟的主席。 1995年11月：HTML 2.0标准发布（RFC 1866）。 1997年1月：HTML 3.2作为W3C推荐标准发布。 1997年12月：HTML 4.0作为W3C推荐标准发布。 1999年12月：HTML4.01作为W3C推荐标准发布。 2008年1月：HTML5由W3C作为工作草案发布。 2011年5月：W3C将HTML5推进至“最终征求”（Last Call）阶段。 2012年12月：W3C指定HTML5作为“候选推荐”阶段。 2014年10月：HTML5作为稳定W3C推荐标准发布，这意味着HTML5的标准化已经完成。 HTML5新特性 引入原生多媒体支持（audio和video标签） 引入可编程内容（canvas标签） 引入语义Web（article、aside、details、figure、footer、header、nav、section、summary等标签） 引入新的表单控件（日历、邮箱、搜索等） 引入对离线存储更好的支持 引入对定位、拖放、WebSocket、后台任务等的支持 使用标签承载内容结构 head – 承载网页设置相关内容，如编码格式，不会在网页实体中显示，但很重要 title – 承载网页标题 meta – 承载网页关键词、编码格式、爬虫爬取方式 link – 承载css外联样式表 style – 承载CSS内联样式表 body – 承载网页显示主体，如文本、图片、超链接等 p – 承载文本块 a – 承载文本超链接 div – 承载区域划分，并无标签语义，多用于排版分块 img – 承载图片，支持本地图片、网络图片 文本 标题和段落 &lt;p/&gt; 文本段落标签 &lt;h1/&gt; -&lt;h6/&gt; 标题标签 粗体和斜体 &lt;i&gt;斜体&lt;/i&gt; – 斜体 &lt;b&gt;加粗&lt;/b&gt; – 加粗 上标和下标 Z&lt;sup&gt;a&lt;/sup&gt; – 上标 Z&lt;sub&gt;b&lt;/sub&gt; – 下标 空白（白色空间折叠） 折行和水平标尺 &lt;br/&gt; – 换行 &lt;hr/&gt; – 水平线 语义化标记 加粗和强调 &lt;em&gt;强调&lt;/em&gt; &lt;strong&gt;加粗&lt;/strong&gt; 列表（list） 有序列表（ordered list） &lt;ol&gt;&lt;/ol&gt; 1234&lt;ol&gt; &lt;li&gt;苹果&lt;/li&gt; &lt;li&gt;香蕉&lt;/li&gt; &lt;/ol&gt; 演示 121. 苹果2. 香蕉 无序列表（unordered list） &lt;ul&gt;&lt;/ul&gt; 1234&lt;ul&gt; &lt;li&gt;数学&lt;/li&gt; &lt;li&gt;语文&lt;/li&gt;&lt;/ul&gt; 演示 12- 数学- 语文 定义列表（definition list）&lt;dl&gt;&lt;/dl&gt; 12345678&lt;/dl&gt; &lt;!-- dt 和dd 分级 --&gt; &lt;dt&gt;a&lt;/dt&gt; &lt;dd&gt;9&lt;/dd&gt; &lt;dd&gt;5&lt;/dd&gt;&lt;dt&gt;7&lt;/dt&gt; &lt;dd&gt;8&lt;/dd&gt;&lt;/dl&gt; 演示 12345a 9 57 8 链接（anchor） &lt;a herf=&quot;&quot; target=&quot;&quot;/&gt; 页面链接 1&lt;a href="http://www.baidu.com" target="_self"&gt;百度一下1&lt;/a&gt; 百度一下1 锚链接 两个&lt;a/&gt;之间的相互跳转，一个作 锚点，另一个的herf属性设置为锚点的name属性值 12&lt;a name='head'/&gt;&lt;a href="#head"/&gt; 功能链接 1例如qq的功能连接，有现成的只需要调用,点击后会提示登录qq，并且能实现聊天 图像（image） &gt;&gt;&lt;img src=&quot;&quot;/&gt; 图像存储位置 – &gt; 存放于项目中一个名为 img的目录 图像及其宽高 – &gt; width,和height, 设置宽高，单位像素px 选择正确的图像格式 JPEG GIF PNG 矢量图 表格（table） &gt;&gt; &lt;table&gt;&lt;/table&gt; 基本的表格结构 123456&lt;table&gt; &lt;tr&gt; &lt;td&gt;一个单元格&lt;/td&gt; &lt;td&gt;一个单元格&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt; 表格的标题 &lt;th&gt;&lt;/th&gt; 定义表的标题，大多数浏览器都会对该标签的内容加粗显示 水平标题 12345678910&lt;table border="1"&gt; &lt;tr&gt; &lt;th&gt;Name&lt;/th&gt; &lt;th&gt;Telephone&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Bill Gates&lt;/td&gt; &lt;td&gt;555 77 854&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt; 垂直标题 12345678910&lt;table border="1"&gt; &lt;tr&gt; &lt;th&gt;First Name:&lt;/th&gt; &lt;td&gt;Bill Gates&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;Telephone:&lt;/th&gt; &lt;td&gt;555 77 854&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt; 跨行和跨列 &#39;rowspan&#39; 纵向合并单元格 &#39;colspan&#39; 横向合并单元格 长表格 表单（form） &gt;&gt; &lt;form method=&quot;&quot; action=&quot;&quot;&gt;&lt;/form&gt; 如何收集信息 method –&gt; 定义表单的提交方式 action –&gt; 定义表单的提交位置 表单控件（input） &lt;input type=&quot;&quot;value=&quot;&quot;/&gt; type属性值不同，功能不同* 文本框 / 密码框 / 文本域 单选按钮 / 复选按钮 / 下拉列表 提交按钮 / 图像按钮 / 文件上传 | 值:—- | 描述:— || ——– | :————————————————— || buttom | 定义可点击的按钮 || checkbox | 复选框 || file | 定义文件选择字段和 “浏览…” 按钮，供文件上传 || image | 定义图像作为提交按钮 || password | 定义密码字段（字段中的字符会被遮蔽） || radio | 定义单选按钮 || reset | 定义重置按钮（重置所有的表单值为默认值） || submit | 定义提交按钮 || text | 默认。定义一个单行的文本字段（默认宽度为 20 个字符） | 组合表单元素 fieldset / legend | :— | :— || ——– | ——————————————– || fieldset | 定义了一组相关的表单元素，并使用外框包含起来 || legend | 定义了&lt;fieldset&gt;元素的标题 | 12345678&lt;form action=""&gt;&lt;fieldset&gt;&lt;legend&gt;Personal information:&lt;/legend&gt;Name: &lt;input type="text" size="30"&gt;&lt;br&gt;E-mail: &lt;input type="text" size="30"&gt;&lt;br&gt;Date of birth: &lt;input type="text" size="10"&gt;&lt;/fieldset&gt;&lt;/form&gt; HTML5的表单控件 日期 电子邮件 / URL 搜索 音视频（audio / video） 视频格式和播放器 视频托管服务 添加视频的准备工作 video标签和属性 audio标签和属性 其他 文档类型 注释 属性 id class 块级元素 / 行级元素 内联框架（internal frame） 页面信息（meta） 转义字符（实体替换符） 使用CSS渲染页面简介 CSS的作用 CSS的工作原理 规则、属性和值 颜色（color） 如何指定颜色 rgb(x, y, z) #ffffff 颜色术语和颜色对比 渐变属性(Gradient) 1background: linear-gradient(direction, color-stop1, color-stop2, ...); 1234567垂直线性渐变#grad &#123; background: -webkit-linear-gradient(red, blue); /* Safari 5.1 - 6.0 */ background: -o-linear-gradient(red, blue); /* Opera 11.1 - 12.0 */ background: -moz-linear-gradient(red, blue); /* Firefox 3.6 - 15 */ background: linear-gradient(red, blue); /* 标准的语法 */&#125; 1234567水平线性渐变#grad &#123; background: -webkit-linear-gradient(left, red , blue); /* Safari 5.1 - 6.0 */ background: -o-linear-gradient(right, red, blue); /* Opera 11.1 - 12.0 */ background: -moz-linear-gradient(right, red, blue); /* Firefox 3.6 - 15 */ background: linear-gradient(to right, red , blue); /* 标准的语法 */&#125; 背景色 文本（text / font） 文本的大小和字型(font-size / font-family) 斜体、粗体、大写和下划线(font-weight / font-style / text-decoration) 行间距(line-height)、字母间距(letter-spacing)和单词间距(word-spacing) 对齐(text-align)方式和缩进(text-ident) 链接样式（:link / :visited / :active / :hover） CSS3新属性 投影(text-shadow) 1h1&#123;text-shadow: 5px 5px 5px #FF0000;&#125; 首字母和首行文本(p:first-letter / p:first-line) 响应用户 盒子（box model） 盒子大小的控制（width / height） 盒子的边框、外边距和内边距（border / margin / padding） 盒子的显示和隐藏（display / visibility） CSS3新属性 边框图像（border-image） 投影（border-shadow） 1div &#123;box-shadow: 10px 10px 5px #888888;&#125; 圆角（border-radius） 列表、表格和表单 列表的项目符号（list-style） 表格的边框和背景（border-collapse） 表单控件的外观 表单控件的对齐 浏览器的开发者工具 图像 控制图像的大小（display: inline-block） 对齐图像 背景图像（background / background-image / background-repeat / background-position） 布局 控制元素的位置（position / z-index） 普通流 ( static ) – 正常，不做任何位置变化 相对定位 ( relative ) – 相对原有位置去做移动 绝对定位 ( absolute ) – 相对最近设置了relative的父元素绝对定位 固定定位 ( fixed ) – 相对浏览器窗口绝对定位 浮动元素（float / clear） 网站布局 HTML5布局 适配屏幕尺寸 固定宽度布局 流体布局 布局网格 使用JavaScript控制行为JavaScript基本语法 语句和注释 变量和数据类型 声明和赋值 简单数据类型和复杂数据类型 变量的命名规则 表达式和运算符 赋值运算符 算术运算符 比较运算符 逻辑运算符 分支结构 if…else… switch…case…default… 循环结构 for循环 while循环 do…while循环 数组 创建数组 操作数组中的元素 函数 声明函数 调用函数 参数和返回值 匿名函数 立即调用函数 面向对象 对象的概念 创建对象的字面量语法 给一个变量赋予json格式数据，即python中的字典类型数据，即可认识是创建了一个对象 访问成员运算符 对象.key 对象[key] 创建对象的构造函数语法 this关键字 添加和删除属性 delete关键字 全局对象 Number / String / Boolean Date / Math / RegEx / Array BOM window对象的属性和方法 history对象 – 浏览器历史记录 forward() / back() / go() location对象 – 浏览器地址栏 navigator对象 – 浏览器对象，能获取到浏览器的信息 screen对象 – 屏幕窗口对象 DOM DOM树 访问元素 getElementById() / querySelector() getElementsByClassName() / getElementsByTagName() / querySelectorAll() parentNode / previousSibling / nextSibling / firstChild / lastChild 操作元素 nodeValue innerHTML / textContent / createElement() / createTextNode() / appendChild() / removeChild() className / id / hasAttribute() / getAttribute() / setAttribute() / removeAttribute() 事件处理 事件类型 UI事件：load / unload / error / resize / scroll 键盘事件：keydown / keyup / keypress 鼠标事件：click / dbclick / mousedown / mouseup / mousemove / mouseover / mouseout 焦点事件：focus / blur 表单事件：input / change / submit / reset / cut / copy / paste / select 事件绑定 HTML事件处理程序（不推荐使用，因为要做到标签与代码分离） 传统的DOM事件处理程序（只能附加一个回调函数） 事件监听器（旧的浏览器中不被支持） 事件流：事件捕获 / 事件冒泡 事件对象（低版本IE中的window.event） target（低版本IE中的srcElement） type cancelable preventDefault() stopPropagation()（低版本IE中的cancelBubble） 鼠标事件 - 事件发生的位置 屏幕位置：screenX和screenY 页面位置：pageX和pageY 客户端位置：clientX和clientY 键盘事件 - 哪个键被按下了 keyCode属性 String.fromCharCode(event.keyCode) HTML5事件 DOMContentLoaded hashchange beforeunload JavaScript API HTML5中的API：geolocation / localStorage / sessionStorage / history 使用jQueryjQuery概述 Write Less Do More（用更少的代码来完成更多的工作） 使用CSS选择器来查找元素（更简单更方便） 使用jQuery方法来操作元素（解决浏览器兼容性问题、应用于所有元素并施加多个方法） 引入jQuery 下载jQuery的开发版和压缩版 从CDN加载jQuery 12345&lt;script src="https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js"&gt;&lt;/script&gt;&lt;script&gt; window.jQuery || document.write('&lt;script src="js/jquery-3.3.1.min.js"&gt;&lt;/script&gt;')&lt;/script&gt; 查找元素 选择器 * / element / #id / .class / selector1, selector2 ancestor descendant / parent&gt;child / previous+next / previous~siblings 筛选器 基本筛选器：:not(selector) / :first / :last / :even / :odd / :eq(index) / :gt(index) / :lt(index) / :animated / :focus 内容筛选器：:contains(‘…’) / :empty / :parent / :has(selector) 可见性筛选器：:hidden / :visible 子节点筛选器：:nth-child(expr) / :first-child / :last-child / :only-child 属性筛选器：[attribute] / [attribute=’value’] / [attribute!=’value’] / [attribute^=’value’] / [attribute$=’value’] / [attribute|=’value’] / [attribute~=’value’] 表单：:input / :text / :password / :radio / :checkbox / :submit / :image / :reset / :button / :file / :selected / :enabled / :disabled / :checked 执行操作 内容操作 获取/修改内容：html() / text() / replaceWith() / remove() 获取/设置元素：before() / after() / prepend() / append() / remove() / clone() / unwrap() / detach() / empty() / add() 获取/修改属性：attr() / removeAttr() / addClass() / removeClass() / css() 获取/设置表单值：val() 查找操作 查找方法：find() / parent() / children() / siblings() / next() / nextAll() / prev() / prevAll() 筛选器：filter() / not() / has() / is() / contains() 索引编号：eq() 尺寸和位置 尺寸相关：height() / width() / innerHeight() / innerWidth() / outerWidth() / outerHeight() 位置相关：offset() / position() / scrollLeft() / scrollTop() 特效和动画 基本动画：show() / hide() / toggle() 消失出现：fadeIn() / fadeOut() / fadeTo() / fadeToggle() 滑动效果：slideDown() / slideUp() / slideToggle() 自定义：delay() / stop() / animate() 事件 文档加载：ready() / load() 用户交互：on() / off() 链式操作检测页面是否可用12345&lt;script&gt; $(document).ready(function() &#123; &#125;);&lt;/script&gt; 12345&lt;script&gt; $(function() &#123; &#125;);&lt;/script&gt; jQuery插件 jQuery Validation jQuery Treeview jQuery Autocomplete jQuery UI 避免和其他库的冲突先引入其他库再引入jQuery的情况。 12345678&lt;script src="other.js"&gt;&lt;/script&gt;&lt;script src="jquery.js"&gt;&lt;/script&gt;&lt;script&gt; jQuery.noConflict(); jQuery(function() &#123; jQuery('div').hide(); &#125;);&lt;/script&gt; 先引入jQuery再引入其他库的情况。 1234567&lt;script src="jquery.js"&gt;&lt;/script&gt;&lt;script src="other.js"&gt;&lt;/script&gt;&lt;script&gt; jQuery(function() &#123; jQuery('div').hide(); &#125;);&lt;/script&gt; 使用Ajax 原生的Ajax 123456789101112131415161718192021222324252627282930313233343536373839404142434445+function () &#123; // 通过id方式获取元素 function $(id) &#123; return document.getElementById(id); &#125;//绑定事件监听 function bind(elem, en, func) &#123; if (elem.addEventListener) &#123; elem.addEventListener(en, func); &#125; else &#123; elem.attachEvent('on' + en, func); &#125; &#125; bind($("loadBtn"),'click',function () &#123; var xhr = new XMLHttpRequest(); var url ='http://api.tianapi.com/meinv/?key=d5cda2a195f6e0191c7f84e8b10ca44b&amp;num=10'; //open()--第一个参数打开方式 //第二个参数--url //第三个参数--true-异步请求(不中断用户体验的飞阻塞式请求)， xhr.open('get',url,true); xhr.onreadystatechange = function () &#123; //准备状态为4表示准备好了，xhr。status=200 表示请求成功 if (xhr.readyState == 4 &amp;&amp; xhr.status == 200) &#123; //xhr.responseText--返回的数据 //JSON.parse（）使用解析数据 var json = JSON.parse(xhr.responseText) // *******按照json示例中去提取数据体******* var mmList = json.newslist; for (var i =0;i&lt;mmList.length;i+=1) &#123; //循环拿每一条数据 var mm = mmList[i]; //创建img元素 var img = document.createElement('img'); //获取当前这条数据的图片url img.src = mm.picUrl; img.width = 1080; //追加至浏览器窗口 document.body.insertBefore(img,$('loadBtn')); //*************************************** &#125; &#125; &#125;; xhr.send(); &#125;);&#125;() 基于jQuery的Ajax 加载内容 1234567891011121314151617181920212223242526272829303132333435$(function () &#123; var url = 'http://api.tianapi.com/meinv/?key=d5cda2a195f6e0191c7f84e8b10ca44b&amp;num=10'; $('#loadBtn').on('click',function () &#123; //第一种 $.getJSON(url,function(json)&#123; for (var i=0;i&lt;json.newslist.length;i+=1) &#123; var mm = json.newslist[i]; $('&lt;img&gt;').attr('src',mm.picUrl).attr('width',300) .insertBefore($('#loadBtn')); &#125; &#125;); //第二种，推荐第二种，代码可能多一些，但是实现功能强大 $.ajax(&#123; type:'get',//请求模式 get post delete put url: 'http://api.tianapi.com/meinv/', async: true, //请求模式 true 异步 默认也是异步 data: &#123; key:'d5cda2a195f6e0191c7f84e8b10ca44b', num:10, &#125;, dataType:'json', success:function(json) &#123; for (var i=0;i&lt;json.newslist.length;i+=1) &#123; var mm = json.newslist[i]; // $('&lt;img&gt;').attr('src',mm.picUrl).attr('width',300) // .insertBefore($('#loadBtn')); $('&lt;p&gt;').append( $('&lt;a&gt;').attr('href',mm.picUrl) .attr('target','_blank').text(mm.title) ).insertBefore($('#loadBtn')); &#125; &#125;, error:function() &#123;&#125; &#125;); &#125;);&#125;); 提交表单 使用Bootstrap特点 支持主流的浏览器和移动设备 容易上手 响应式设计 内容 网格系统 封装的CSS 现成的组件 JavaScript插件]]></content>
      <categories>
        <category>HTML5</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[玩转Linux操作系统]]></title>
    <url>%2F2018%2F09%2F03%2F%E7%8E%A9%E8%BD%ACLinux%2F</url>
    <content type="text"><![CDATA[操作系统发展史 Linux概述Linux是一个通用操作系统。一个操作系统要负责任务调度、内存分配、处理外围设备I/O等操作。操作系统通常由内核和系统程序（设备驱动、底层库、shell、服务程序等）两部分组成。 Linux内核是芬兰人Linus Torvalds开发的，于1991年9月发布。而Linux操作系统作为Internet时代的产物，它是由全世界许多开发者共同合作开发的，是一个自由的操作系统（注意是自由不是免费）。 Linux系统优点 通用操作系统，不跟特定的硬件绑定。 用C语言编写，有可移植性，有内核编程接口。 支持多用户和多任务，支持安全的分层文件系统。 大量的实用程序，完善的网络功能以及强大的支持文档。 可靠的安全性和良好的稳定性，对开发者更友好。 基础命令Linux系统的命令通常都是如下所示的格式： 1命令名称 [命名参数] [命令对象] 获取登录信息 - w / who / last。 12345678910[root@izwz97tbgo9lkabnat2lo8z ~]# w 23:31:16 up 12:16, 2 users, load average: 0.00, 0.01, 0.05USER TTY FROM LOGIN@ IDLE JCPU PCPU WHATroot pts/0 182.139.66.250 23:03 4.00s 0.02s 0.00s wjackfrue pts/1 182.139.66.250 23:26 3:56 0.00s 0.00s -bash[root@izwz97tbgo9lkabnat2lo8z ~]# whoroot pts/0 2018-04-12 23:03 (182.139.66.250)jackfrued pts/1 2018-04-12 23:26 (182.139.66.250)[root@izwz97tbgo9lkabnat2lo8z ~]# who am iroot pts/0 2018-04-12 23:03 (182.139.66.250) 查看自己使用的Shell - ps。 Shell也被称为“壳”，它是用户与内核交流的翻译官，简单的说就是人与计算机交互的接口。目前很多Linux系统默认的Shell都是bash（Bourne Again SHell），因为它可以使用Tab键进行命令补全、可以保存历史命令、可以方便的配置环境变量以及执行批处理操作等。 1234[root@izwz97tbgo9lkabnat2lo8z ~]# ps PID TTY TIME CMD 3531 pts/0 00:00:00 bash 3553 pts/0 00:00:00 ps 查看命令的说明 - whatis。 1234[root@izwz97tbgo9lkabnat2lo8z ~]# whatis psps (1) - report a snapshot of the current processes.[root@izwz97tbgo9lkabnat2lo8z ~]# whatis pythonpython (1) - an interpreted, interactive, object-oriented programming language 查看命令的位置 - which / whereis。 12345678[root@izwz97tbgo9lkabnat2lo8z ~]# whereis psps: /usr/bin/ps /usr/share/man/man1/ps.1.gz[root@izwz97tbgo9lkabnat2lo8z ~]# whereis pythonpython: /usr/bin/python /usr/bin/python2.7 /usr/lib/python2.7 /usr/lib64/python2.7 /etc/python /usr/include/python2.7 /usr/share/man/man1/python.1.gz[root@izwz97tbgo9lkabnat2lo8z ~]# which ps/usr/bin/ps[root@izwz97tbgo9lkabnat2lo8z ~]# which python/usr/bin/python 查看帮助文档 - man / info / apropos。 1234567891011121314151617[root@izwz97tbgo9lkabnat2lo8z ~]# ps --helpUsage: ps [options] Try 'ps --help &lt;simple|list|output|threads|misc|all&gt;' or 'ps --help &lt;s|l|o|t|m|a&gt;' for additional help text.For more details see ps(1).[root@izwz97tbgo9lkabnat2lo8z ~]# man psPS(1) User Commands PS(1)NAME ps - report a snapshot of the current processes.SYNOPSIS ps [options]DESCRIPTION...[root@izwz97tbgo9lkabnat2lo8z ~]# info ps... 切换用户 - su。 12[root@izwz97tbgo9lkabnat2lo8z ~]# su hellokitty[hellokitty@izwz97tbgo9lkabnat2lo8z root]$ 以管理员身份执行命令 - sudo。 12345[jackfrued@izwz97tbgo9lkabnat2lo8z ~]$ ls /rootls: cannot open directory /root: Permission denied[jackfrued@izwz97tbgo9lkabnat2lo8z ~]$ sudo ls /root[sudo] password for jackfrued:calendar.py code error.txt hehe hello.c index.html myconf result.txt 说明：如果希望用户能够以管理员身份执行命令，用户必须在sudoers（/etc/sudoers）名单中。 登入登出相关 - logout / exit / adduser / userdel / passwd / ssh。 123456789101112[root@izwz97tbgo9lkabnat2lo8z ~]# adduser jackfrued[root@izwz97tbgo9lkabnat2lo8z ~]# passwd jackfruedChanging password for user jackfrued.New password:Retype new password:passwd: all authentication tokens updated successfully.[root@izwz97tbgo9lkabnat2lo8z ~]# ssh hellokitty@1.2.3.4hellokitty@1.2.3.4's password:Last login: Thu Apr 12 23:05:32 2018 from 10.12.14.16[hellokitty@izwz97tbgo9lkabnat2lo8z ~]$ logoutConnection to 1.2.3.4 closed.[root@izwz97tbgo9lkabnat2lo8z ~]# 查看系统和主机名 - uname / hostname。 123456[root@izwz97tbgo9lkabnat2lo8z ~]# unameLinux[root@izwz97tbgo9lkabnat2lo8z ~]# hostnameizwz97tbgo9lkabnat2lo8z[root@iZwz97tbgo9lkabnat2lo8Z ~]# cat /etc/centos-releaseCentOS Linux release 7.4.1708 (Core) 重启和关机 - reboot / init 6 / shutdown / init 0。 查看历史命令 - history。 实用程序文件和文件夹操作 创建/删除目录 - mkdir / rmdir。 创建/删除文件 - touch / rm。 touch命令用于创建空白文件或修改文件时间。在Linux系统中一个文件有三种时间： 更改内容的时间（mtime） 更改权限的时间（ctime） 最后访问时间（atime） 切换和查看当前工作目录 - cd / pwd。 查看目录内容 - ls。 查看文件内容 - cat / head / tail / more / less。 拷贝/移动文件 - cp / mv。 查看文件及内容 - find / grep。 1234567[root@izwz97tbgo9lkabnat2lo8z ~]# find -name *.html./index.html./code/index.html[root@izwz97tbgo9lkabnat2lo8z ~]# grep "&lt;script&gt;" . -R -n./index.html:15: &lt;script&gt;./code/index.html:2884: &lt;script&gt;./code/foo.html:2:&lt;!--STATUS OK--&gt;&lt;html&gt; &lt;head&gt;&lt;meta ... 符号链接 - ln。 压缩和归档 - gzip / gunzip / xz / tar。 其他工具 - sort / uniq / diff / file / wc。 管道和重定向 管道的使用 - |。 输出重定向和错误重定向 - > / 2>。 输入重定向 - \&lt;。 别名 alias unalias 其他程序 时间和日期 - date / cal。 录制操作脚本 - script。 给用户发送消息 - mesg / write / wall / mail。 文件系统文件和路径 命名规则 扩展名 隐藏文件 工作目录和主目录 绝对路径和相对路径 目录结构 /bin - 基本命令的二进制文件 /boot - 引导加载程序的静态文件 /dev - 设备文件 /etc - 配置文件 /home - 用户主目录的父目录 /lib - 共享库文件 /lib64 - 共享64位库文件 /lost+found - 存放未链接文件 /media - 自动识别设备的挂载目录 /mnt - 临时挂载文件系统的挂载点 /opt - 可选插件软件包安装位置 /proc - 内核和进程信息 /root - root账户主目录 /run - 存放系统运行时需要的东西 /sbin - 超级用户的二进制文件 /sys - 设备的伪文件系统 /tmp - 临时文件夹 /usr - 用户应用目录 /var - 变量数据目录 访问权限 chmod。 chown。 磁盘管理 列出文件系统的磁盘使用状况 - df。 磁盘分区表操作 - fdisk。 格式化文件系统 - mkfs。 文件系统检查 - fsck。 挂载/卸载 - mount / umount。 编辑器vim 启动和退出 命令模式和编辑模式 光标操作 文本操作 查找和替换 /正则表达式 :1,$s/正则表达式/替换后的内容/gice g - global i - ignore case c - confirm e - error 参数设定 .vimrc set ts=4 set nu 高级技巧 映射快捷键 inoremap key:… 录制宏 在命令模式下输入qa开始录制宏（qa/qb/qc/qd） 执行你的操作，这些操作都会被录制下来 如果要录制的操作完成了，按q结束录制 @a播放宏（1000@a - 将宏播放1000次） 环境变量 HOME SHELL HISTSIZE RANDOM PATH 软件安装和配置yum yum update yum install / yum remove yum list / yum search yum makecache rpm rpm -ivh --force --nodeps rpm -e rpm -qa | grep 源代码构建安装 … make &amp;&amp; make install 实例 安装MySQL。 安装Redis。 安装NginX。 配置服务 systemctl start / stop / restart / status systemctl enable / disable 计划任务 - crontab。 开机自启。 网络访问和管理 通过网络获取资源 - wget。 -b 后台下载模式 -O 下载到指定的目录 -r 递归下载 显示/操作网络配置（旧） - ipconfig。 显示/操作网络配置（新） - ip。 网络可达性检查 - ping。 查看网络服务和端口 - netstat。 安全文件拷贝 - scp。 安全文件传输 - sftp。 Shell和Shell编程 通配符。 后台运行。 其他内容 awk sed xargs]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
</search>
